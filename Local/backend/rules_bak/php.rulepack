{
  "plugin_type": "php",
  "file_types": [
    ".php"
  ],
  "rules": [
    {
      "id": "PHPXSSSI",
      "severity": "中",
      "title": "可能的跨站脚本",
      "description": "攻击者可能会与这个安全漏洞的浏览器客户端上下文中执行任意HTML/JavaScript代码。用户被污染数据嵌入到应用程序的输出HTML和用户的浏览器呈现，从而允许攻击者嵌入和渲染的恶意代码。点击链接时准备一个恶意链接会导致这种恶意代码在其他浏览器的用户上下文中执行。这可能会导致本地网站污损，网络钓鱼或偷窃的cookie和会话劫持。",
      "remediation": "Encode all user tainted data with PHP built-in functions before embedding the data into the output. Make sure to set  the parameter ENT_QUOTES to avoid an eventhandler injections to existing HTML attributes and specify the correct charset.",
      "link": "
	  /n（1）输入验证：对用户的输入进行合理验证（如：字母、数字）。
      /n（2）输出编码：根据数据将要置于HTML上下文中的不同位置（Html标签、Html属性、JavaScript脚本、CSS、URL），对所有不可信数据进行恰当的输出编码。例如，在Html标签或者Html属性中输出不可信的数据，可以采用htmlentities() 和 htmlspecialchars()进行HtmlEncode。
      /n（3）设置HttpOnly属性，浏览器将禁止页面的JavaScript访问带有HttpOnly属性的Cookie，从而避免攻击者利用跨站脚本漏洞进行Cookie劫持攻击。给Cookie添加HttpOnly的代码如下。
      /n 在PHP4中：header("Set-Cookie: hidden=value; httpOnly");
      /n 在PHP5中：setcookie("abc", "test", NULL, NULL, NULL, NULL, TRUE);最后一个参数是HttpOnly属性。
	  /n &https://www.owasp.org/index.php/XSS."",
      "example_insecure": "<?php print('Hello ' . $_GET['name']); ?>",
      "example_secure": "<?php print('Hello ' . htmlentities($_GET['name'], ENT_QUOTES, 'utf-8'); ?>",
      "platform_version": "all",
      "enabled": "true",
      "logic": "Checks for reflection through dynamic argument concatenation in echo, print, print_r, exit, die, printf, vprintf",
      "signature": "KHRyaWdnZXJfZXJyb3J8dXNlcl9lcnJvcnxvZGJjX3Jlc3VsdF9hbGx8b3ZyaW1vc19yZXN1bHRfYWxsfGlmeF9odG1sdGJsX3Jlc3VsdHxwcmludHxwcmludF9yfGV4aXR8ZGllfCh2KXByaW50ZikoLiopKFtcc10qW15cIlwnXSpcJFtcd10qKQ=="
    },
    {
      "id": "PHPSQLSI",
      "severity": "中",
      "title": "可能的SQL注入",
      "description": "攻击者可能会利用这一漏洞在数据库服务器上执行任意SQL命令。创建将在数据库管理系统（DBMS）来执行数据库查询时用户有漏数据被使用。攻击者可以注入自己的SQL语法从而引发读取，插入或删除数据库条目或攻击底层操作系统根据查询，数据库管理系统和配置。",
      "remediation": "Always embed expected strings into quotes and escape the string with a PHP buildin function before embedding it to the query. Always embed expected integers without quotes and typecast the data to integer before embedding it to the query. Escaping data but embedding it without quotes is not safe.",
      "link": "
	  /n（1）输入验证：对用户的输入进行合理验证（字母、数字）。
      /n（2）正确使用预编译SQL语句，绑定变量。例如，可以将描述例子改写为使用参数化 SQL 指令：
      /n $mysqli = new mysqli($host,$user, $password, $db);
      /n $name = $_POST['name'];
      /n $query = "SELECT * FROM tbl_users WHERE userLogin = ?";
      /n $stmt = $mysqli->prepare($query);
      /n $stmt->bind_param('s',$name);
      /n $stmt->execute();
	  /n &https://www.owasp.org/index.php/SQL_Injection.",
      "example_insecure": "<?php mysql_query('SELECT * FROM users WHERE id = ' . $_GET['id']); ?>",
      "example_secure": "Integer Type: <?php mysql_query('SELECT * FROM users WHERE id = ' . (int)$_GET['id']); String Type: mysql_query('SELECT * FROM users WHERE name = '' . mysql_real_escape_string($_GET['name']) . '''); ?>",
      "platform_version": "all",
      "enabled": "true",
      "logic": "Finds patterns of SQL keywords concatenated with, possibly unstrusted, dynamic content.",
      "signature": "KC4qW1wiXCddKSh1bmlvbnxzZWxlY3R8Y3JlYXRlfHJlbmFtZXx0cnVuY2F0ZXxsb2FkfGFsdGVyfGRlbGV0ZXx1cGRhdGV8aW5zZXJ0fGRlc2MpKCgoLipcLi4qKShcJF8oR0VUfFBPU1R8UkVRVUVTVClcWy4qXF0pKXwoKC4qKShpbnRvfGZyb218bGlrZXxoYXZpbmd8d2hlcmUpKC4qXC4uKikoXCRfKEdFVHxQT1NUfFJFUVVFU1QpXFsuKlxdKSkp"
    },
    {
      "id": "PHPHDRSI",
      "severity": "中",
      "title": "可能的HTTP头注入",
      "description": "攻击者可以注入任意头的HTTP响应头。这可以注入时，被滥用的重定向位置：头被添加在设置Cookie会话固定攻击中头部或帮助。此外，HTTP响应可以覆盖和JavaScript可以注入导致跨站脚本攻击。在PHP版本4.4.2以下，可用于头线路终端（跨浏览器）。在下面5.4 PHP的字符仍然可以用于头线路终端（浏览器，IE浏览器）。",
      "remediation": "Update PHP to prevent header injection or implement a whitelist. Additionally strip out control characters like %00, %0D, %0A etc.",
      "link": "
	  /n 更新PHP以防止标头注入或实施白名单。 另外删除控制字符，如％00，％0D，％0A等。
	  /n 代码层面常见的解决方案：
      /n 1.严格检查变量是否已经初始化。
      /n 2.禁止header()函数中的参数外界可控。
	  /n &https://www.owasp.org/index.php/HTTP_Response_Splitting.",
      "example_insecure": "<?php header('Location: '.$_GET['url']); ?>",
      "example_secure": "<?php if(!in_array($_GET['url'], $whitelist)) exit; ?>",
      "platform_version": "all",
      "enabled": "true",
      "logic": "Finds patterns of methods responsible for setting HTTP headers concatenated with, possibly unstrusted, dynamic content.",
      "signature": "KGN1cmxfc2V0b3B0fGN1cmxfc2V0b3B0X2FycmF5fGN5cnVzX3F1ZXJ5fGVycm9yX2xvZ3xmc29ja29wZW58ZnRwX2NobW9kfGZ0cF9leGVjfGZ0cF9kZWxldGV8ZnRwX2ZnZXR8ZnRwX2dldHxmdHBfbmxpc3R8ZnRwX25iX2ZnZXR8ZnRwX25iX2dldHxmdHBfbmJfcHV0fGZ0cF9wdXR8Z2V0X2hlYWRlcnN8aW1hcF9vcGVufGltYXBfbWFpbHxtYWlsfG1iX3NlbmRfbWFpbHxsZGFwX2Nvbm5lY3R8bXNlc3Npb25fY29ubmVjdHxwZnNvY2tvcGVufHNlc3Npb25fcmVnaXN0ZXJ8c29ja2V0X2JpbmR8c29ja2V0X2Nvbm5lY3R8c29ja2V0X3NlbmR8c29ja2V0X3dyaXRlfHN0cmVhbV9zb2NrZXRfY2xpZW50fHN0cmVhbV9zb2NrZXRfc2VydmVyKS4qKFxcXCRbXHddKnxcJFtcd10qKQ=="
    },
    {
      "id": "PHPHRSSI",
      "severity": "中",
      "title": "可能的HTTP响应拆分",
      "description": "A攻击者可以注入任意头的HTTP响应头。这可以注入时，被滥用的重定向位置：头被添加在设置Cookie会话固定攻击中头部或帮助。此外，HTTP响应可以覆盖和JavaScript可以注入导致跨站脚本攻击。在PHP版本4.4.2以下，可用于头线路终端（跨浏览器）。在下面5.4 PHP的字符仍然可以用于头线路终端（浏览器，IE浏览器）。",
      "remediation": "Update PHP to prevent header injection or implement a whitelist. Additionally strip out control characters like %00, %0D, %0A etc.",
      "link": "
	  /n更新PHP以防止标头注入或实施白名单。 另外删除控制字符，如％00，％0D，％0A等。
	  /n 1.进入theme文件夹，找到当前主题中的functions.php文件。
      /n 2.在functions文件中快速搜索“$redirect”找到“$redirect = $_GET['r'];”这段代码。
      /n 3.将以下代码替换步骤2中的代码，就可以搞定，代码如下：$redirect = trim(str_replace("\r","",str_replace("\r\n","",strip_tags(str_replace("'","",str_replace("\n", "", str_replace(" ","",str_replace("\t","",trim($redirect))))),""))));
	  /n &https://www.owasp.org/index.php/HTTP_Response_Splitting.",
      "example_insecure": "<?php header('Location: '.$_GET['url']); ?>",
      "example_secure": "<?php if(!in_array($_GET['url'], $whitelist)) exit; ?>",
      "platform_version": "all",
      "enabled": "true",
      "logic": "Finds patterns of methods responsible for setting HTTP headers concatenated with, possibly unstrusted, dynamic content.",
      "signature": "KGhlYWRlclwoKSguKikoW1xzXSpbXlwiXCddKlwkW1x3XSop"
    },
    {
      "id": "PHPRCESI",
      "severity": "中",
      "title": "可能执行任意代码",
      "description": "攻击者可能会利用这一漏洞执行任意PHP代码。用户被污染数据嵌入到了编译上运行PHP代码并执行从而允许攻击者注入将执行自己的PHP代码的功能。此漏洞可能会导致整个服务器的妥协。",
      "remediation": "Build a whitelist for positive code with regular expressions (e.g. alphanumeric only) or arrays. Do not try to blacklist for evil PHP code.",
      "link": "
	  /n 1.使用json保存数组，当读取时就不需要使用eval了
      /n 2.对于必须使用eval的地方，一定严格处理用户数据
      /n 3.字符串使用单引号包括可控代码，插入前使用addslashes转义
      /n 4.放弃使用preg_replace的e修饰符，使用preg_replace_callback()替换
      /n 5.若必须使用preg_replace的e修饰符，则必用单引号包裹正则匹配出的对象
	  /n &https://www.owasp.org/index.php/Code_Injection. ",
      "example_insecure": "<?php eval('$color = ' . $_GET['color] . ';'); ?>",
      "example_secure": "<?php $colors = array('blue', 'red'); if(!in_array($_GET['color'], $colors)) exit; ?>",
      "platform_version": "all",
      "enabled": "true",
      "logic": "Finds patterns of methods responsible for interpreting strings as code concatenated with, possibly unstrusted, dynamic content.",
      "signature": "KGFycmF5X2RpZmZfdWFzc29jfGFycmF5X2RpZmZfdWtleXxhcnJheV9maWx0ZXJ8YXJyYXlfaW50ZXJzZWN0X3Vhc3NvY3xhcnJheV9pbnRlcnNlY3RfdWtleXxhcnJheV9tYXB8YXJyYXlfcmVkdWNlfGFycmF5X3VkaWZmfGFycmF5X3VkaWZmX2Fzc29jfGFycmF5X3VkaWZmX3Vhc3NvY3xhcnJheV91aW50ZXJzZWN0fGFycmF5X3VpbnRlcnNlY3RfYXNzb2N8YXJyYXlfdWludGVyc2VjdF91YXNzb2N8YXJyYXlfd2Fsa3xhcnJheV93YWxrX3JlY3Vyc2l2ZXxhc3NlcnR8YXNzZXJ0X29wdGlvbnN8Y2FsbF91c2VyX2Z1bmN8Y2FsbF91c2VyX2Z1bmNfYXJyYXl8Y3JlYXRlX2Z1bmN0aW9ufGRvdG5ldF9sb2FkfGZvcndhcmRfc3RhdGljX2NhbGx8Zm9yd2FyZF9zdGF0aWNfY2FsbF9hcnJheXxlaW9fYnVzeXxlaW9fY2htb2R8ZWlvX2Nob3dufGVpb19jbG9zZXxlaW9fY3VzdG9tfGVpb19kdXAyfGVpb19mYWxsb2NhdGV8ZWlvX2ZjaG1vZHxlaW9fZmNob3dufGVpb19mZGF0YXN5bmN8ZWlvX2ZzdGF0fGVpb19mc3RhdHZmc3xldmFsfGV2ZW50X2J1ZmZlcl9uZXd8ZXZlbnRfc2V0fGl0ZXJhdG9yX2FwcGx5fG1iX2VyZWdfcmVwbGFjZXxtYl9lcmVnaV9yZXBsYWNlfG9iX3N0YXJ0fHByZWdfZmlsdGVyfHByZWdfcmVwbGFjZXxwcmVnX3JlcGxhY2VfY2FsbGJhY2t8cmVnaXN0ZXJfc2h1dGRvd25fZnVuY3Rpb258cmVnaXN0ZXJfdGlja19mdW5jdGlvbnxydW5raXRfbWV0aG9kX2FkZHxydW5raXRfbWV0aG9kX2NvcHl8cnVua2l0X21ldGhvZF9yZWRlZmluZXxydW5raXRfbWV0aG9kX3JlbmFtZXxydW5raXRfZnVuY3Rpb25fYWRkfHJ1bmtpdF9mdW5jdGlvbl9jb3B5fHJ1bmtpdF9mdW5jdGlvbl9yZWRlZmluZXxydW5raXRfZnVuY3Rpb25fcmVuYW1lfHNlc3Npb25fc2V0X3NhdmVfaGFuZGxlcnxzZXRfZXJyb3JfaGFuZGxlcnxzZXRfZXhjZXB0aW9uX2hhbmRsZXJ8c3BsX2F1dG9sb2FkfHNwbF9hdXRvbG9hZF9yZWdpc3RlcnxzcWxpdGVfY3JlYXRlX2FnZ3JlZ2F0ZXxzcWxpdGVfY3JlYXRlX2Z1bmN0aW9ufHN0cmVhbV93cmFwcGVyX3JlZ2lzdGVyfHVhc29ydHx1a3NvcnR8dXNvcnR8eWFtbF9wYXJzZXx5YW1sX3BhcnNlX2ZpbGV8eWFtbF9wYXJzZV91cmwpLiooXFxcJFtcd10qfFwkW1x3XSop"
    },
    {
      "id": "PHPRFISI",
      "severity": "中",
      "title": "可能的远程文件包含",
      "description": "攻击者可能会包括本地或远程PHP文件或者与此漏洞读取非PHP文件。创建将被纳入到当前文件的文件名时，用户被污染数据被使用。在这个文件中PHP代码将被评估，非PHP代码将被嵌入到输出。此漏洞可能会导致整个服务器的妥协。",
      "remediation": "Build a whitelist for positive file names. Do not only limit the file name to specific paths or extensions.",
      "link": "
	  /n 1.严格检查变量是否已经初始化。
      /n 2.建议假定所有输入都是可疑的，尝试对所有输入提交可能可能包含的文件地址，包括服务器本地文件及远程文件，进行严格的检查，参数中不允许出现../之类的目录跳转符。
      /n 3.严格检查include类的文件包含函数中的参数是否外界可控。
      /n 4.不要仅仅在客户端做数据的验证与过滤，关键的过滤步骤在服务端进行。
      /n 5.在发布应用程序之前测试所有已知的威胁。
	  /n &http://websec.wordpress.com/2010/02/22/exploiting-php-file-inclusion-overview/",
      "example_insecure": "<?php include('includes/' . $_GET['file']); ?>",
      "example_secure": "<?php $files = array('index.php', 'main.php'); if(!in_array($_GET['file'], $files)) exit; ?>",
      "platform_version": "all",
      "enabled": "true",
      "logic": "Finds patterns of methods responsible for reading file inputs and executing the contents as trusted code.",
      "signature": "KGluY2x1ZGV8aW5jbHVkZV9vbmNlfHBhcnNla2l0X2NvbXBpbGVfZmlsZXxwaHBfY2hlY2tfc3ludGF4fHJlcXVpcmV8cmVxdWlyZV9vbmNlfHJ1bmtpdF9pbXBvcnR8c2V0X2luY2x1ZGVfcGF0aHx2aXJ0dWFsKVtcc1x0XSooXFxcJFtcd10qfFwkW1x3XSop"
    },
    {
      "id": "PHPCEXSI",
      "severity": "中",
      "title": "可能的服务器端命令执行",
      "description": "攻击者可能会利用这一漏洞执行任意系统命令。创建将底层操作系统上执行命令时，用户被污染数据被使用。此漏洞可能会导致整个服务器的妥协。",
      "remediation": "Limit the code to a very strict character subset or build a whitelist of allowed commands. Do not try to filter for evil commands. Try to avoid the usage of system command executing functions if possible.",
      "link": "
	  /n 1.建议假定所有输入都是可疑的，尝试对所有输入提交可能执行命令的构造语句进行严格的检查或者控制外部输入，系统命令执行函数的参数不允许外部传递。
      /n 2.不仅要验证数据的类型，还要验证其格式、长度、范围和内容。
      /n 3.不要仅仅在客户端做数据的验证与过滤，关键的过滤步骤在服务端进行。
      /n 4.对输出的数据也要检查，数据库里的值有可能会在一个大网站的多处都有输出，即使在输入做了编码等操作，在各处的输出点时也要进行安全检查。
      /n 5.在发布应用程序之前测试所有已知的威胁。
	  /n &http://websec.wordpress.com/2010/02/22/exploiting-php-file-inclusion-overview/",
      "example_insecure": "<?php exec('./crypto -mode ' . $_GET['mode']); ?>",
      "example_secure": "<?php $modes = array('r', 'w', 'a'); if(!in_array($_GET['mode'], $modes)) exit; ?>",
      "platform_version": "all",
      "enabled": "true",
      "logic": "Finds patterns of methods responsible for interpreting strings as valid code and executes them.",
      "signature": "KGJhY2t0aWNrc3xleGVjfGV4cGVjdF9wb3BlbnxwYXNzdGhydXxwY250bF9leGVjfHBvcGVufHByb2Nfb3BlbnxzaGVsbF9leGVjfHN5c3RlbXxtYWlsfG1iX3NlbmRfbWFpbHx3MzJhcGlfaW52b2tlX2Z1bmN0aW9ufHczMmFwaV9yZWdpc3Rlcl9mdW5jdGlvbikuKihcXFwkW1x3XSp8XCRbXHddKik="
    },
    {
      "id": "PHPFSOSI",
      "severity": "中",
      "title": "可能危险的文件操作",
      "description": "攻击者可能会写入到任意文件或注入任意代码与此漏洞的文件。创建将要打开的文件名或创建将被写入到文件中的字符串时，当用户有漏数据被使用。攻击者可以尝试在一个PHP文件中允许完全破坏服务器写入任意PHP代码。",
      "remediation": "Build a whitelist for positive file names. Do not only limit the file name to specific paths or extensions. If you write into PHP files make sure an attacker can not write own PHP code. Use a whitelist with arrays or regular expressions (e.g. alphanumeric only).",
      "link": "
	  /n 1.为文件名建立白名单并将文件名限制为特定路径或扩展名。
	  /n 2.写入PHP文件，确保攻击者无法编写自己的PHP代码。
	  /n 3.使用数组或正则表达式的白名单（例如仅限英文数字）。
	  /n &http://projects.webappsec.org/w/page/13246932/Improper Filesystem Permissions",
      "example_insecure": "<?php $h = fopen($_GET['file'], 'w'); fwrite($h, $_GET['data']); ?>",
      "example_secure": "<?php $files = array('index.php', 'main.php'); if(!in_array($_GET['file'], $files)) exit; ?>",
      "platform_version": "all",
      "enabled": "true",
      "logic": "Finds patterns of methods responsible for creating, altering, deleting filesystem.",
      "signature": "KGJ6d3JpdGV8Y2htb2R8Y2hncnB8Y2hvd258Y29weXxkaW9fd3JpdGV8ZWlvX2NobW9kfGVpb19jaG93bnxlaW9fbWtkaXJ8ZWlvX21rbm9kfGVpb19ybWRpcnxlaW9fd3JpdGV8ZWlvX3VubGlua3xlcnJvcl9sb2d8ZXZlbnRfYnVmZmVyX3dyaXRlfGZpbGVfcHV0X2NvbnRlbnRzfGZwdXRjc3Z8ZnB1dHN8ZnByaW50ZnxmdHJ1bmNhdGV8ZndyaXRlfGd6d3JpdGV8Z3pwdXRzfGxvYWRYTUx8bWtkaXJ8bW92ZV91cGxvYWRlZF9maWxlfHBvc2l4X21rbm9kfHJlY29kZV9maWxlfHJlbmFtZXxybWRpcnxzaG1vcF93cml0ZXx0b3VjaHx1bmxpbmt8dmZwcmludGZ8eGRpZmZfZmlsZV9iZGlmZnx4ZGlmZl9maWxlX2JwYXRjaHx4ZGlmZl9maWxlX2RpZmZfYmluYXJ5fHhkaWZmX2ZpbGVfZGlmZnx4ZGlmZl9maWxlX21lcmdlM3x4ZGlmZl9maWxlX3BhdGNoX2JpbmFyeXx4ZGlmZl9maWxlX3BhdGNofHhkaWZmX2ZpbGVfcmFiZGlmZnx5YW1sX2VtaXRfZmlsZSkuKihcXFwkW1x3XSp8XCRbXHddKik="
    },
    {
      "id": "PHPXPISI",
      "severity": "中",
      "title": "可能XPath注入",
      "description": "攻击者可能会利用这一漏洞执行任意XPath表达式。创建将在XML资源执行的XPath表达式时，用户被污染数据被使用。攻击者可以注入自己的XPath语法读取任意XML条目。",
      "remediation": "Always embed expected strings into quotes and escape the string with a PHP buildin function before embedding it to the expression. Always embed expected integers without quotes and typecast the data to integer before embedding it to the expression. Escaping data but embedding it without quotes is not safe.",
      "link": "
	  /n 1.数据提交到服务器上端，在服务端正式处理这批数据之前，对提交数据的合法性进行验证。
      /n 2.检查提交的数据是否包含特殊字符，对特殊字符进行编码转换或替换、删除敏感字符或字符串。
      /n 3.对于系统出现的错误信息，以IE错误编码信息替换，屏蔽系统本身的出错信息。
      /n 4.参数化XPath查询，将需要构建的XPath查询表达式，以变量的形式表示，变量不是可以执行的脚本。如下代码可以通过创建保存查询的外部文件使查询参数化：
         declare variable $loginID as xs：string external；
         declare variable $password as xs：string external；
         //users/user[@loginID=$loginID and@password= $password]
      /n 5.通过MD5、SSL等加密算法，对于数据敏感信息和在数据传输过程中加密，即使某些非法用户通过非法手法获取数据包，看到的也是加密后的信息。
	  /n &http://packetstormsecurity.org/files/view/33380/Blind_XPath_Injection_20040518.pdf",
      "example_insecure": "<?php $ctx->xpath_eval('//user[name/text()=/'' . $_GET['name'] . '/']/account/text()'); ?>",
      "example_secure": "<?php $ctx->xpath_eval('//user[name/text()=/'' . addslashes($_GET['name']) . '/']/account/text()'); ?>",
      "platform_version": "all",
      "enabled": "true",
      "logic": "Finds patterns of methods that perform some XPATH operation and have been concatenated with, possibly unstrusted, dymanic content.",
      "signature": "KHhwYXRoX2V2YWx8eHBhdGhfZXZhbF9leHB8eHB0cl9ldmFsKS4qKFxcXCRbXHddKnxcJFtcd10qKQ=="
    },
    {
      "id": "PHPLDPSI",
      "severity": "中",
      "title": "可能LDAP注入",
      "description": "攻击者可能会利用这一漏洞执行任意LDAP表达式。创建将一个LDAP服务器上执行的LDAP过滤器时，用户被污染数据被使用。攻击者可以注入自己的LDAP语法来读取任意LDAP条目。",
      "link": "
	  /n 1.圆括号、星号、逻辑操作符、关系运操作符在应用层都必须过滤。
      /n 2.构造LDAP搜索过滤器的值在发送给LDAP服务器查询之前都要用应用层有效地值列表来核对。
	  /n 3.替换正则表达式。
	  /n &http://www.blackhat.com/presentations/bh-europe-08/Alonso-Parada/Whitepaper/bh-eu-08-alonso-parada-WP.pdf",
      "example_insecure": "<?php ldap_search($ds, $dn, '(&(sn=person)(person='.$_GET['person'].'))'); ?>",
      "example_secure": "<?php if(!preg_match(/'/^[a-z0-9]+$//', $_GET['person'])) exit; ?>",
      "platform_version": "all",
      "enabled": "true",
      "logic": "Finds patterns of methods that perform some LDAP operation and have been concatenated with, possibly unstrusted, dymanic content.",
      "signature": "KGxkYXBfYWRkfGxkYXBfZGVsZXRlfGxkYXBfbGlzdHxsZGFwX3JlYWR8bGRhcF9zZWFyY2gpLiooXFxcJFtcd10qfFwkW1x3XSop"
    },
    {
      "id": "PHPSRLSI",
      "severity": "中",
      "title": "可能有风险的反序列化（）的用法",
      "description": "当userinput被反序列化函数的攻击者可以通过提供将在当前的应用范围内使用串行化对象滥用此。这些对象只能是本申请的类的实例。一些小工具，如__wakeup（）或__destruct（）这些类的功能将被自动当物体在反序列化过程中复活，反对攻击者指定的变量可能会导致这些小工具的漏洞调用",
      "remediation": "Prevent using unserialize because it contains much more flaws.",
      "link": "
	  /n 一、漏洞解决方法:
	     /n 1.防止使用unserialize，因为它包含更多缺陷。
         /n 2.使用 SerialKiller 替换进行序列化操作的 ObjectInputStream 类；
         /n 3.在不影响业务的情况下，临时删除掉项目里的“org/apache/commons/collections/functors/InvokerTransformer.class” 文件；
         /n   在服务器上找org/apache/commons/collections/functors/InvokerTransformer.class类的jar，目前weblogic10以后都在Oracle/Middleware/modules下com.bea.core.apache.commons.collections_3.2.0.jar，创建临时目录tt，解压之后删除InvokerTransformer.class类后再打成com.bea.core.apache.commons.collections_3.2.0.jar覆盖Oracle/Middleware/modules下，重启所有服务。如下步骤是linux详细操作方法：
         /n   A)mkdir tt
         /n   B)cp -r Oracle/Middleware/modules/com.bea.core.apache.commons.collections_3.2.0.jar ./tt
         /n   C)jar xf Oracle/Middleware/modules/com.bea.core.apache.commons.collections_3.2.0.jar
         /n   D)cd org/apache/commons/collections/functors
         /n   E)rm -rf InvokerTransformer.class
         /n   F)jar cf com.bea.core.apache.commons.collections_3.2.0.jar org/* META-INF/*
         /n   G)mv com.bea.core.apache.commons.collections_3.2.0.jar Oracle/Middleware/modules/
         /n   H)重启服务
     /n  二、漏洞解决方法:
         /n 1.假如不是处理weblogic自带的com.bea.core.apache.commons.collections_3.2.0.jar，而是修改应用代码collections_*.jar，一定在发版本不能覆盖。应用覆盖、备份恢复的时候和发版本的时候也请切记不要覆盖掉修改后的JAR文件。
         /n 2.重启服务时候要删除server-name下的cache和tmp
         /n  例如
         /n   rm -rf  ~/user_projects/domains/base_domain/servers/AdminServer/cache
         /n   rm -rf  ~/user_projects/domains/base_domain/servers/AdminServer/tmp
	     /n   &https://media.blackhat.com/bh-us-10/presentations/Esser/BlackHat-USA-2010-Esser-Utilizing-Code-Reuse-Or-Return-Oriented-Programming-In-PHP-Application-Exploits-slides.pdf",
      "example_insecure": "<?php class foo { public $file = 'test.txt'; public $data = 'text'; function __destruct() { file_put_contents($this->file, $this->data); } } $a = unserialize($_GET['s']); ?>",
      "example_secure": "Not available",
      "platform_version": "all",
      "enabled": "true",
      "logic": "Finds usage of the 'unserialize()' method that where a dynamic content, possibly unstrusted, is passed as an argument.",
      "signature": "KGxkYXBfYWRkfGxkYXBfZGVsZXRlfGxkYXBfbGlzdHxsZGFwX3JlYWR8bGRhcF9zZWFyY2gpLiooXFxcJFtcd10qfFwkW1x3XSop"
    },
    {
      "id": "PHPDBISI",
      "severity": "中",
      "title": "可能有风险的DBMS操作",
      "description": "攻击者可能会利用这一漏洞在数据库服务器上执行任意SQL命令。创建将在数据库管理系统（DBMS）来执行数据库查询时用户有漏数据被使用。攻击者可以注入自己的SQL语法从而引发读取，插入或删除数据库条目或攻击底层操作系统根据查询，数据库管理系统和配置。",
      "remediation": "Please make sure no untrusted user input is being passed to the DBMS server without proper sanitization. Always embed expected strings into quotes and escape the string with a PHP buildin function before embedding it to the query. Always embed expected integers without quotes and typecast the data to integer before embedding it to the query. Escaping data but embedding it without quotes is not safe.",
      "link": "
	  /n 1.请确保在没有正确清理的情况下，不会将不可信任的用户输入传递给DBMS服务器。 
	  /n 2.始终将预期的字符串嵌入引号，并将其嵌入到查询中之前使用PHP buildin函数转义该字符串。 
	  /n 3.始终嵌入无引号的预期整数，并将数据类型转换为整数，然后再将其嵌入到查询中。 
	  /n 4.转义数据但不包括引号嵌入数据是不安全的。
	  /n &https://www.owasp.org/index.php/SQL_Injection",
      "example_insecure": "<?php mysql_query('SELECT * FROM users WHERE id = ' . $_GET['id']); ?>",
      "example_secure": "<?php mysql_query('SELECT * FROM users WHERE id = ' . (int)$_GET['id']); '.'/n'.' mysql_query('SELECT * FROM users WHERE name = /'' . mysql_real_escape_string($_GET['name']) . '/''); ?>",
      "platform_version": "all",
      "enabled": "true",
      "logic": "Searches for methods that handle database related operations and warns the developer",
      "signature": "KGRiYV9vcGVufGRiYV9wb3BlbnxkYmFfaW5zZXJ0fGRiYV9mZXRjaHxkYmFfZGVsZXRlfGRieF9xdWVyeXxvZGJjX2RvfG9kYmNfZXhlY3xvZGJjX2V4ZWN1dGV8ZGIyX2V4ZWN8ZGIyX2V4ZWN1dGV8ZmJzcWxfZGJfcXVlcnl8ZmJzcWxfcXVlcnl8aWJhc2VfcXVlcnl8aWJhc2VfZXhlY3V0ZXxpZnhfcXVlcnl8aWZ4X2RvfGluZ3Jlc19xdWVyeXxpbmdyZXNfZXhlY3V0ZXxpbmdyZXNfdW5idWZmZXJlZF9xdWVyeXxtc3FsX2RiX3F1ZXJ5fG1zcWxfcXVlcnl8bXNxbHxtc3NxbF9xdWVyeXxtc3NxbF9leGVjdXRlfG15c3FsX2RiX3F1ZXJ5fG15c3FsX3F1ZXJ5fG15c3FsX3VuYnVmZmVyZWRfcXVlcnl8bXlzcWxpX3N0bXRfZXhlY3V0ZXxteXNxbGlfcXVlcnl8bXlzcWxpX3JlYWxfcXVlcnl8bXlzcWxpX21hc3Rlcl9xdWVyeXxvY2lfZXhlY3V0ZXxvY2lleGVjdXRlfG92cmltb3NfZXhlY3xvdnJpbW9zX2V4ZWN1dGV8b3JhX2RvfG9yYV9leGVjfHBnX3F1ZXJ5fHBnX3NlbmRfcXVlcnl8cGdfc2VuZF9xdWVyeV9wYXJhbXN8cGdfc2VuZF9wcmVwYXJlfHBnX3ByZXBhcmV8c3FsaXRlX29wZW58c3FsaXRlX3BvcGVufHNxbGl0ZV9hcnJheV9xdWVyeXxhcnJheVF1ZXJ5fHNpbmdsZVF1ZXJ5fHNxbGl0ZV9xdWVyeXxzcWxpdGVfZXhlY3xzcWxpdGVfc2luZ2xlX3F1ZXJ5fHNxbGl0ZV91bmJ1ZmZlcmVkX3F1ZXJ5fHN5YmFzZV9xdWVyeXxzeWJhc2VfdW5idWZmZXJlZF9xdWVyeSkuKihcXFwkW1x3XSp8XCRbXHddKik="
    },
    {
      "id": "PHPFIOSO",
      "severity": "中",
      "title": "可能不被信任的文件系统输入",
      "description": "你可能尝试通过这可能是不可信的本地/远程文件系统的资源，以读取输入。要谨慎在处理这些数据。",
      "remediation": "Based on the context use appropriate escaping/encoding whereever applicable.",
      "link": "基于上下文使用适当的转义/编码。N/A",
      "example_insecure": "<?php echo file_get_contents($remote_path); ?>",
      "example_secure": "<?php echo htmlentities(file_get_contents($remote_path)); //XSS Context Only ?>",
      "platform_version": "all",
      "enabled": "true",
      "logic": "Finds patterns of API that allow reading input from a local/remote filesystem resource.",
      "signature": "KGJ6cmVhZHxkaW9fcmVhZHxleGlmX2ltYWdldHlwZXxleGlmX3JlYWRfZGF0YXxleGlmX3RodW1ibmFpbHxmZ2V0c3xmZ2V0c3N8ZmlsZXxmaWxlX2dldF9jb250ZW50c3xmcmVhZHxnZXRfbWV0YV90YWdzfGdsb2J8Z3pyZWFkfHJlYWRkaXJ8cmVhZF9leGlmX2RhdGF8c2NhbmRpcnx6aXBfcmVhZClcKC4qW1wpXSo="
    },
    {
      "id": "PHPSRVSO",
      "severity": "中",
      "title": "可能不被信任$ _SERVER变量输入",
      "description": "你可能尝试通过这可能是不可信一个$ _SERVER变量来读取输入。要谨慎在处理这些数据。",
      "remediation": "Based on the context use appropriate escaping/encoding whereever applicable.",
      "link": "加强程序自身的过滤机制,基于上下文使用适当的转义/编码。N/A",
      "example_insecure": "<?php echo $_SERVER['HTTP_USER_AGENT']; ?>",
      "example_secure": "<?php echo htmlentities($_SERVER['HTTP_USER_AGENT']); //XSS Context Only ?>",
      "platform_version": "all",
      "enabled": "true",
      "logic": "Finds patterns of $_SERVER variable inputs",
      "signature": "XCRfU0VSVkVSXFtbXCdcIiddKEhUVFBfUkVGRVJFUnxIVFRQX1VTRVJfQUdFTlR8UEhQX0FVVEhfVVNFUnxRVUVSWV9TVFJJTkcpW1wnXCJdXF0="
    },
    {
      "id": "PHPUSRSO",
      "severity": "中",
      "title": "可能不被信任的用户输入",
      "description": "你可能想读通过API可变输入这可能是不可信的。要谨慎在处理这些数据。",
      "remediation": "Based on the context use appropriate escaping/encoding whereever applicable.",
      "link": "1.设置白名单.2.基于上下文使用适当的转义/编码.N/A",
      "example_insecure": "<?php echo $_GET['q']; ?>",
      "example_secure": "<?php echo htmlentities($_GET['q']); //XSS Context Only ?>",
      "platform_version": "all",
      "enabled": "true",
      "logic": "Finds patterns of $_SERVER variable inputs",
      "signature": "XCQoX0dFVHxfUE9TVHxfQ09PS0lFfF9SRVFVRVNUfF9GSUxFU3xfU0VSVkVSfF9FTlZ8SFRUUF9HRVRfVkFSU3xIVFRQX1BPU1RfVkFSU3xIVFRQX0NPT0tJRV9WQVJTfEhUVFBfUkVRVUVTVF9WQVJTfEhUVFBfUE9TVF9GSUxFU3xIVFRQX1NFUlZFUl9WQVJTfEhUVFBfRU5WX1ZBUlN8SFRUUF9SQVdfUE9TVF9EQVRBfGFyZ2N8YXJndik="
    },
    {
      "id": "PHPSQLSO",
      "severity": "中",
      "title": "从数据库中可能有风险输入",
      "description": "你也许是某种数据库的。要小心，你的SQL查询不包含任何用户输入。如果你反映的数据用户，请确保您在正确的上下文中执行输出编码。",
      "remediation": "Based on the context use appropriate escaping/encoding whereever applicable.",
      "link": "基于上下文使用适当的转义/编码。N/A",
      "example_insecure": "<?php while ($row = mysql_fetch_array($result, MYSQL_ASSOC)) { printf('ID: %s  Name: %s', $row['id'], $row['name']); } ?>",
      "example_secure": "<?php while ($row = mysql_fetch_array($result, MYSQL_ASSOC)) { printf('ID: %s  Name: %s', htmlentities($row['id']), htmlentities($row['name'])) //XSS Context Only; } ?>",
      "platform_version": "all",
      "enabled": "true",
      "logic": "Finds patterns of database inputs",
      "signature": "KG15c3FsX2ZldGNoX2FycmF5fG15c3FsX2ZldGNoX2Fzc29jfG15c3FsX2ZldGNoX2ZpZWxkfG15c3FsX2ZldGNoX29iamVjdHxteXNxbF9mZXRjaF9yb3d8cGdfZmV0Y2hfYWxsfHBnX2ZldGNoX2FycmF5fHBnX2ZldGNoX2Fzc29jfHBnX2ZldGNoX29iamVjdHxwZ19mZXRjaF9yZXN1bHR8cGdfZmV0Y2hfcm93fHNxbGl0ZV9mZXRjaF9hbGx8c3FsaXRlX2ZldGNoX2FycmF5fHNxbGl0ZV9mZXRjaF9vYmplY3R8c3FsaXRlX2ZldGNoX3NpbmdsZXxzcWxpdGVfZmV0Y2hfc3RyaW5nKS4qKFxcXCRbXHddKnxcJFtcd10qKQ=="
    },
    {
      "id": "PHPCRPSO",
      "severity": "中",
      "title": "不安全的密码",
      "description": "你可能通过做不安全的API（S）某种加密操作。这可以是保密不足，随机化或完整性。",
      "remediation": "Based on the situation maintain the highest standard of cryptography by using the correct API(s).",
      "link": "根据情况，通过使用正确的API来保持最高的加密标准。N/A",
      "example_insecure": "<?php md5($file); ?>",
      "example_secure": "<?php hash('sha256', $file); ?>",
      "platform_version": "all",
      "enabled": "true",
      "logic": "Finds patterns of insecure cryptograhpic API(s).",
      "signature": "KGJhc2U2NF9lbmNvZGV8YmFzZTY0X2RlY29kZXxjcmMzMnxjcnlwdHxoYXNofG1kNXxtdF9zcmFuZHxyYW5kfHNoYTF8bXRfc3JhbmR8c3RyX3JvdDEzfG1jcnlwdF9jYmN8bWNyeXB0X2NmYnxtY3J5cHRfY3JlYXRlX2l2fG1jcnlwdF9kZWNyeXB0fG1jcnlwdF9lY2J8bWNyeXB0X2VuY3J5cHR8bWNyeXB0X2dlbmVyaWNfaW5pdHxtY3J5cHRfZ2VuZXJpY3xtY3J5cHRfbW9kdWxlX29wZW58bWNyeXB0X29mYnxtZGVjcnlwdF9nZW5lcmljKVwoLipbXG5cKV0q"
    }
  ]
}
